//! https://simple.wikipedia.org/wiki/Order_of_magnitude.
use ethnum::U256;

pub const QUINTILLIONTH: U256 = U256::new(1u128);
pub const HUN_QUADTH: U256 = U256::new(10u128);
pub const TEN_QUADTH: U256 = U256::new(100u128);
pub const QUADTH: U256 = U256::new(1000);
pub const HUN_TRILTH: U256 = U256::new(10000);
pub const TEN_TRILTH: U256 = U256::new(100000);
pub const TRILTH: U256 = U256::new(1000000);
pub const HUN_BILTH: U256 = U256::new(10000000);
pub const TEN_BILTH: U256 = U256::new(100000000);
pub const BILTH: U256 = U256::new(1000000000);
pub const HUN_MILTH: U256 = U256::new(10000000000);
pub const TEN_MILTH: U256 = U256::new(100000000000);
pub const MILTH: U256 = U256::new(1000000000000);
pub const HUN_THOUSANDTH: U256 = U256::new(10000000000000);
pub const TEN_THOUSANDTH: U256 = U256::new(100000000000000);
pub const THOUSANDTH: U256 = U256::new(1000000000000000);
pub const HUNDREDTH: U256 = U256::new(10000000000000000);
pub const TENTH: U256 = U256::new(100_000_000_000_000_000);
pub const ONE: U256 = U256::new(1_000_000_000_000_000_000);
pub const TEN: U256 = U256::new(10000000000000000000);
pub const HUNDRED: U256 = U256::new(100000000000000000000);
pub const THOUSAND: U256 = U256::new(1000000000000000000000);
pub const TEN_THOUSAND: U256 = U256::new(10000000000000000000000);
pub const HUN_THOUSAND: U256 = U256::new(100000000000000000000000);
pub const MIL: U256 = U256::new(1000000000000000000000000);
pub const TEN_MIL: U256 = U256::new(10000000000000000000000000);
pub const HUN_MIL: U256 = U256::new(100000000000000000000000000);
pub const BIL: U256 = U256::new(1000000000000000000000000000);
pub const TEN_BIL: U256 = U256::new(10000000000000000000000000000);
pub const HUN_BIL: U256 = U256::new(100000000000000000000000000000);
pub const TRIL: U256 = U256::new(1000000000000000000000000000000);
pub const TEN_TRIL: U256 = U256::new(10000000000000000000000000000000);
pub const HUN_TRIL: U256 = U256::new(100000000000000000000000000000000);
pub const QUAD: U256 = U256::new(1000000000000000000000000000000000);
pub const TEN_QUAD: U256 = U256::new(10000000000000000000000000000000000);
pub const HUN_QUAD: U256 = U256::new(100000000000000000000000000000000000);
pub const QUIN: U256 = U256::new(1000000000000000000000000000000000000);
pub const TEN_QUIN: U256 = U256::new(10000000000000000000000000000000000000);
pub const HUN_QUIN: U256 = U256::new(100_000_000_000_000_000_000_000_000_000_000_000_000);
pub const SEX: U256 = U256::from_words(2, 319435266158123073073250785136463577088);
pub const TEN_SEX: U256 = U256::from_words(29, 131811359292784559562136384478721867776);
pub const HUN_SEX: U256 = U256::from_words(293, 297266492165030205231240022491914043392);
pub const SEPT: U256 = U256::from_words(2938, 250405986282794344605403365464994742272);
pub const TEN_SEPT: U256 = U256::from_words(29387, 122083294381374201810411402627569942528);
pub const HUN_SEPT: U256 = U256::from_words(293873, 199985843050926627713990203980394790912);
pub const OCT: U256 = U256::from_words(2938735, 298446595904573959823029002645106851840);
pub const TEN_OCT: U256 = U256::from_words(29387358, 262207023678231890523293166996922826752);
pub const HUN_OCT: U256 = U256::from_words(293873587, 240093668335749660989309417946850787328);
pub const NON: U256 = U256::from_words(2938735877, 18960114910927365649471927446130393088);
pub const TEN_NON: U256 = U256::from_words(29387358770, 189601149109273656494719274461303930880);
pub const HUN_NON: U256 = U256::from_words(293873587705, 194599656488044247630319707454198251520);
pub const DECI: U256 = U256::from_words(2938735877055, 244584730275750158986324037383141457920);
pub const TEN_DECI: U256 = U256::from_words(29387358770557, 63870734310932345619618121809037099008);
pub const HUN_DECI: U256 = U256::from_words(293873587705571, 298424976188384992732806610658602778624);
pub const UND: U256 = U256::from_words(2938735877055718, 261990826516342219621069247131882094592);
pub const TEN_UND: U256 = U256::from_words(29387358770557187, 237931696716852951967070219296443465728);
pub const HUN_UND: U256 = U256::from_words(293873587705571876, 337622765642898738890454548373825388544);
pub const DUOD: U256 = U256::from_words(2938735877055718769, 313686354140541217734174016852339982336);
pub const TEN_DUOD: U256 = U256::from_words(29387358770557187699, 74322239116966006171368701637485920256);
pub const HUN_DUOD: U256 = U256::from_words(293873587705571876992, 62657657327783134786937801511322779648);
pub const TRE: U256 = U256::from_words(2938735877055718769921, 286294206356892884406003407681459585024);
pub const TEN_TRE: U256 = U256::from_words(29387358770557187699218, 140683128201421136353037217360450158592);
pub const HUN_TRE: U256 = U256::from_words(293873587705571876992184, 45701814330457509676873743877428740096);
pub const QUATT: U256 = U256::from_words(2938735877055718769921841, 116735776383636633305362831342519189504);
pub const TEN_QUATT: U256 = U256::from_words(29387358770557187699218413, 146510663073550942663504491129887260672);
pub const HUN_QUATT: U256 = U256::from_words(293873587705571876992184134, 103977163051755572781546481571799760896);
pub const QUIND: U256 = U256::from_words(2938735877055718769921841343, 18924529754740337425340993422692974592);
pub const TEN_QUIND: U256 = U256::from_words(29387358770557187699218413430, 189245297547403374253409934226929745920);
pub const HUN_QUIND: U256 = U256::from_words(293873587705571876992184134305,191041140869341425217226305110456401920);
pub const SEXD: U256 = U256::from_words(2938735877055718769921841343055, 208999574088721934855390013945722961920);
pub const TEN_SEXD: U256 = U256::from_words(29387358770557187699218413430556, 48301539361588567773652494866620350464);
pub const HUN_SEXD: U256 = U256::from_words(293873587705571876992184134305561, 142733026694947214273150341234435293184);
pub const SEPTD: U256 = U256::from_words(2938735877055718769921841343055614, 66200799265718288878004982617280086016);
pub const TEN_SEPTD: U256 = U256::from_words(29387358770557187699218413430556141, 321725625736244425316675218741032648704);
pub const HUN_SEPTD: U256 = U256::from_words(293873587705571876992184134305561419, 154714955073998081996380720524412583936);
pub const OCTOD: U256 = U256::from_words(2938735877055718769921841343055614194, 186020083056226966110308775517052993536);
pub const TEN_OCTOD: U256 = U256::from_words(29387358770557187699218413430556141945, 158788995957577343786214718011688878080);
pub const HUN_OCTOD: U256 = U256::from_words(0xDD15FE86AFFAD91249EF0EB713F39EBE, 0xAA987B6E6FD2A0000000000000000000);

mod test {
    use super::*;
}
